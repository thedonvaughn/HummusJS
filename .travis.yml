language: cpp
compiler:
- gcc
os:
- linux
- osx
addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    packages:
    - g++-4.8
services:
- docker
env:
  matrix:
  - MUSL=true NODE_NVM_VERSION="9.11.1"
  - MUSL=true NODE_NVM_VERSION="10.8.0"
  - MUSL=true NODE_NVM_VERSION="11.2.0"
  global:
  - secure: keweAYtX6UpAHnUHnlTY8u9w9Sf8ncBQHrmI/ZGeJUucmv8Lpi7PgTNC+RpDfr5iIVf362fxZ2nQHsXbEmEjlb4lWM6fpVlJDOSgA/VRBqjDk8nOCaDCxxs2gpEOo3SD9G1YkglfJfH/z1YDVpneM7W/+6GZGsIcRndEUIuhevhGG78aTrC2drZWoo4Adp2AyM2czRlQF+Nb9Yg5F7BvHdBibJTx5ZojLmEuHhIU3W9JEjBYKOv/1XPV396VjPA1upVyHC9E7rK5ch6W3fRN7LyqTNgcN0HI1ZQrud95FAU5MRuw/BtObouVSYXwkpteoYRSZwHiaKT4WnKiMTG/j0kK68RjeP0CSiSOqEQHWn2wUhgoKfkdxRYbaw7OFdIE87CpwxROiwQV2SMW/1r2whDh/KqWUIc06hrR52UQMlJSpzVPjj6TVHeVG9Y9CkTeFdEF4p/DA4HZHswYGJBkdx9erlF/vsFx+pSYZvwu+F0qY0THzabFx5FiI2iWjnvJlKqtpvwfNc5rje53LfpP+jkb/+5Z+l3C3EMdVbXK/KJllexXAoHr99NY3HOU25RBuqBusrZgeLlvme5UH6LvF1DQ3EYnDQ/6wSsKzvu4Qh30Y4jpu1b8MW9a0sX/lrBtIM2y44aqOAF7a4wBqt5mEHxOmLdaBydZc5K4f4Hc6UQ=
  - secure: RoLxMNC+249VHBTVCN0kT9yf4lEW+f+JkZSWQTs4Sr/26WeZqzD6rgm4c89OOoGZs4nl/iNN6o/I1UgWhdcdPptdD+Hd7nXRm6Z6GcXQZGDkBMWGs8JnFQwR2om4XPNtJofbuoe4jlp2wdmQ48QyeZeOHooyTM0V1dz9ZMi6cbE2x/D+8fkT+YzzOf8r+8j4bOhxsZWY7CdqRaKwRZiDiezeN5CtfKO9+1WwENiybdWLi95T2AGd2417UaYGruUs+JXBlFqV7XOPDB1QYXGvSlCVR3m8hiaj4HWxDYTuMpNyUCJgjjOwe9BEB95ERqgpSQ78YOYHzXPkRYCSsl/dTTPTejkb1K+PYGYF3NqGhWrQ7Dy96C5WJlodhbI/oRPLOPSbQpG44esx9maxtK+XF2VCNxKuNMODiLww6NQMfV/qYwr+9gh8USDFDse5UxkiIozZt7U1tWQjvGexiObzH/bgQl6Ygm/uDB5KT6iZVstXU7rKzWxnoWegrcVqt4THixQU4u1GO3Y+B+kYBpbBkHIysKQEV7wS5JVrqhqGozPRW0Vf4Em+3L5R6LSqVuSln6OQKbN1UHdzKljKZCT+KMhpy68TKSc/VEyU/Hrtr/Gb5fDfy3y8vF/uIn5kFBqsiR4kgMGPMl1wHG2fuhcWi7J75VyksiWLQ4OxMj6K36U=
matrix:
  allow_failures:
  - env: ELECTRON_VERSION="3.0.10" NODE_NVM_VERSION="10.2.0"
  - os: osx
    env: MUSL=true NODE_NVM_VERSION="9.11.1"
  - os: osx
    env: MUSL=true NODE_NVM_VERSION="10.8.0"
  - os: osx
    env: MUSL=true NODE_NVM_VERSION="11.2.0"
before_install:
- if [[ $TRAVIS_OS_NAME == "linux" ]]; then export CXX=g++-4.8; fi
- if [[ $ELECTRON_VERSION ]]; then export npm_config_target=$ELECTRON_VERSION; export
  npm_config_target_arch=x64; export npm_config_disturl=https://atom.io/download/electron;
  export npm_config_runtime=electron; fi
- COMMIT_MESSAGE=$(git show -s --format=%B $TRAVIS_COMMIT | tr -d '\n')
- PUBLISH_BINARY=true
- if [[ $MUSL ]]; then EXTRA_NODE_PRE_GYP_FLAGS="--target_libc=musl"; fi;
- git clone https://github.com/creationix/nvm.git ../.nvm && source ../.nvm/nvm.sh
- nvm install $NODE_NVM_VERSION
- nvm use $NODE_NVM_VERSION
- echo $PUBLISH_BINARY
- node --version
- npm --version
- "$CXX --version"
install:
- if [[ $MUSL ]]; then scripts/alpine-build.sh; else npm install --build-from-source;
  fi
script:
- if [[ $MUSL ]]; then scripts/alpine-test.sh ./node_modules/.bin/node-pre-gyp package
  testpackage $EXTRA_NODE_PRE_GYP_FLAGS; else ./node_modules/.bin/node-pre-gyp package
  testpackage $EXTRA_NODE_PRE_GYP_FLAGS; npm test; fi
- if [[ "${PUBLISH_BINARY}" ]]; then ./node_modules/.bin/node-pre-gyp unpublish publish
  $EXTRA_NODE_PRE_GYP_FLAGS; rm -rf {build,binding}; fi
- if [[ $MUSL ]]; then ./scripts/alpine-test.sh ./node_modules/.bin/node-pre-gyp install
  $EXTRA_NODE_PRE_GYP_FLAGS; else ./node_modules/.bin/node-pre-gyp install $EXTRA_NODE_PRE_GYP_FLAGS;
  npm test; fi
