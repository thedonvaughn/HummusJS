language: cpp
compiler:
- gcc
os:
- linux
- osx
addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    packages:
    - g++-4.8
services:
- docker
env:
  matrix:
  - MUSL=true NODE_NVM_VERSION="9.11.1"
  - MUSL=true NODE_NVM_VERSION="10.8.0"
  - MUSL=true NODE_NVM_VERSION="11.2.0"
  global:
  - secure: G/ACOBeC75C+G/JG3t+egb5x9QKOCIz0nNX+ltmCDAZyR9vq9o9r0oBgUTH2/xD7WbaDmHCIHEZdn7vQJN/r55uYR1I7mJzNCTGRp101ezVa1l9QCR5ypqw6JYDiAatZ/pkvnkaeECQJL39OTlRJuY0/rW68OenlG/Xm4B4wi6Ho+lYGSo7qRRUtskQkymWMBdv8UQtgNCvI9rctKUZneBe38BkEoK+eQgKymqll8Tl0otH+36itdyftYNzVW7jeBQjSZYZUaLieYsuwls2T5TbZY3Z845d5q9TbSySixuTuValS1rUI63dLgdGABgsXgHF1ay1N+FE3uW9VmsRWqbG9xEzVunQZE5T2UdOUWuZVCXe9azE44G999B3wMBRvwLF9K0Y0RzW9Vcjv86+rpaEpyUcsRJwT3rt0kgwU9J3QpJAP9UtAuHMMSHtpLPmNI+KZ2w47M7s9RtTjujnMZE8g6luYQcJN3cifdkSduxTeXlwsk6p0b3uPmIqRNP0ir01wNUxzqmhj8/SSf3GuX4mRWgLz6x8xhShgPNctqFpe6VFzq9hauvGRHFtcXR+XNA/Z281t0FfjQyoYfBS3JLMxwGXGP3eqHPq4/mqy0ffCf8qQgdF4haXocL2ZzROMWaVxPtwO3qskJ1qqBd1tNnatmbKEfsfOFSrfLRMHl7Q=
  - secure: Ae9nST6I6HHEsoo3mp48DM8w1bE8qdJFqkze8ED3wRVMI47MSVV3701Xfs1cszhOWfJG82B2m+CgSAQXmPrOqr9nyh6dufp+5+ujG1S5YMCexafAz2ptTu5IIpKKhZCkWtfyn8hu8M5EPzxYYX2jNolW9p9E8Y9azG4EWGT5ejVPPd50ImdtvMc1EePAI00Gva4P/o1XfPJFVdtZnrJ1UQWG/Vlkntv76Y4xbEEF+Fc6n5oDzbxsLsL4BivhDqElnH37e9z77O+bntPQVc0FKH/Xz53ZwN5WgptZ6Vp9JrQzG5pgiRkcbuDG2d4YVXzRywcJiz1PnVUnW4cKTrE5iy0AMNHlVm4kuLz+9jrFoJ0cwkr/NAdSTIQQBKwd7iLviJdcdaetpOdm4b1byi+UGZAV1EGaTt6p31Ubfl54f0aTOdDkpJKX/prIxxPfKtC28QKf5+dMv64c62z6tawGJRLvl+p/lNZWtDLscmhwP0iH6h3o/ea7NAJMFsmYCD8wvYVK7LezcYAL0qPFlyNf8uFnenCOGkpPjSO5mTStCDHRg1VW/cbGSM3Z3hDURdWyoiiMnHYHHrM5S8KLlyrIHZI6/MAnwZ0y0Iy4uxolBDd4Q2nwDQqzaHmdNC5jo+cv1v3Cu2Sjf24tWYNxrds76JiBBrOKmlUwYr/p+hWDMjM=
matrix:
  allow_failures:
  - env: ELECTRON_VERSION="3.0.10" NODE_NVM_VERSION="10.2.0"
  - os: osx
    env: MUSL=true NODE_NVM_VERSION="9.11.1"
  - os: osx
    env: MUSL=true NODE_NVM_VERSION="10.8.0"
  - os: osx
    env: MUSL=true NODE_NVM_VERSION="11.2.0"
before_install:
- if [[ $TRAVIS_OS_NAME == "linux" ]]; then export CXX=g++-4.8; fi
- if [[ $ELECTRON_VERSION ]]; then export npm_config_target=$ELECTRON_VERSION; export
  npm_config_target_arch=x64; export npm_config_disturl=https://atom.io/download/electron;
  export npm_config_runtime=electron; fi
- COMMIT_MESSAGE=$(git show -s --format=%B $TRAVIS_COMMIT | tr -d '\n')
- PUBLISH_BINARY=true
- if [[ $MUSL ]]; then EXTRA_NODE_PRE_GYP_FLAGS="--target_libc=musl"; fi;
- git clone https://github.com/creationix/nvm.git ../.nvm && source ../.nvm/nvm.sh
- nvm install $NODE_NVM_VERSION
- nvm use $NODE_NVM_VERSION
- echo $PUBLISH_BINARY
- node --version
- npm --version
- "$CXX --version"
install:
- if [[ $MUSL ]]; then scripts/alpine-build.sh; else npm install --build-from-source;
  fi
script:
- if [[ $MUSL ]]; then scripts/alpine-test.sh ./node_modules/.bin/node-pre-gyp package
  testpackage $EXTRA_NODE_PRE_GYP_FLAGS; else ./node_modules/.bin/node-pre-gyp package
  testpackage $EXTRA_NODE_PRE_GYP_FLAGS; npm test; fi
- if [[ "${PUBLISH_BINARY}" ]]; then ./node_modules/.bin/node-pre-gyp unpublish publish
  $EXTRA_NODE_PRE_GYP_FLAGS; rm -rf {build,binding}; fi
- if [[ $MUSL ]]; then ./scripts/alpine-test.sh ./node_modules/.bin/node-pre-gyp install
  $EXTRA_NODE_PRE_GYP_FLAGS; else ./node_modules/.bin/node-pre-gyp install $EXTRA_NODE_PRE_GYP_FLAGS;
  npm test; fi
