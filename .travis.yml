language: cpp
compiler:
- gcc
os:
- linux
- osx
addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    packages:
    - g++-4.8
services:
- docker
env:
  matrix:
  - MUSL=true NODE_NVM_VERSION="9.11.1"
  - MUSL=true NODE_NVM_VERSION="10.8.0"
  - MUSL=true NODE_NVM_VERSION="11.2.0"
  global:
  - secure: DldqgYC8jLyUCa5+Ry8HWmyriOToAp0yFKfLCdSRXH7prlxzH8mlRyFrS3oZZszvIzjyTODlne/LTt+kaY8QfkPSG1jI6//YYhSsJQZ++8Unr8z9QOjgnmc9ljUJ04zW8LFMWRcDygvp+9tvijkNKJfK5V4dKmwNeuxXe9FxP8DsbL3fA+2VEXvi486gSytKJNydLvnmg9DO5Nx92Bqy690f85F28HgwbtxEUk0TYrZj1DCPIqBHSFZSuQ/CP0VXFf+kBhZz4ZeuhT6Onh+soPMSrdScTgwYqXeoTQ/luHktUUcdA6L0zByKpICMNB0vByjZrHw0l5E5xfuyh8Cb6Vtgf/q8NYap7SGbrhG5x4asiNAj0CftPPT2KNTEebRp6acod7zPe6kEwIWsbalfU4XHmw8OkH8bUa0xm1rVgCyIC8UnKqMOcF7qsRExXtWPWy9p2ph1mlIeQW6bvMOWtkjnnaeCk/a98u4pS868obn5u1UZvSM9DnI1hv7nI9vsLZlYl5NP1FwCIYf+BYR9xP4MUH0ZUlGfCM6A+Ybn1jFWowKwTHm7F9uWGjn69/25EG4yJmJG7WZdoVnVSsZRlCaIL5jujP2azeCjV2pUyoly476/bxw7d94b8kzuKObvQe3QMRe1SeUPFtdATF5ggsJJGsKuEaOqVpbtRzQ3Qm8=
  - secure: lrrhVC7tk6NRSK8Q9hfkJQGZLSd3oEycNb5WFavgILVMFz8WeWIy1JQ7RMbA8bGzasaLOLrMwPgjWw+hFX5Xp8tuhQbSqsxjOciSHZw6EzaeiiKCA7lUnRkuwuWeQuDfxdfe4vDvw8rv30dPBDVzjLZucsYCnFujdHcX9FzXJjNPSvjwPbbfOyfVbBmjVp8I0RuAYhKwRB29p1kIh0Fa1/lsf4w0TYpQDCZqKUKFzk6XhyiKDSx5kkfag9FiU4fT78YzOFdpUMsqxhRs+xYQTCb/2diKELNFAsHJssypuqgoTbHizh3qgb1RoTrb35tiAMQGvo63zAJb10yTXRB0SuI19/GsuI3iq0GIhirRnLKY52EAAkDDu7584yP4IZpvGSb6oJyLbHi6ADClALUrsQdAFm6N7fpSqAithxHOLzoeojM42k+EqktBSyPkOZuAfT1jFr0psBpwtt9HskQwcJN9mhiiClie34KItFE3gTVwuEsLbH4X1fooOfmCmOVz+vQjqL58yyPEmtqT9k/5+U+NJEF0rnASdMVqiFL8uOUf7f3hP2fB2ZrT6UtWSTc7WAndZmPzwRqPCXw4fQaO5YaXho6z7y59OA8866ajIZ/VaIC7WsW8BH+vu1rPhrj9mSM9ZK0NuzFUpQCg4lrlOqWIc5wWlwpwTl15AfDMcvM=
matrix:
  allow_failures:
  - env: ELECTRON_VERSION="3.0.10" NODE_NVM_VERSION="10.2.0"
  - os: osx
    env: MUSL=true NODE_NVM_VERSION="9.11.1"
  - os: osx
    env: MUSL=true NODE_NVM_VERSION="10.8.0"
  - os: osx
    env: MUSL=true NODE_NVM_VERSION="11.2.0"
before_install:
- if [[ $TRAVIS_OS_NAME == "linux" ]]; then export CXX=g++-4.8; fi
- if [[ $ELECTRON_VERSION ]]; then export npm_config_target=$ELECTRON_VERSION; export
  npm_config_target_arch=x64; export npm_config_disturl=https://atom.io/download/electron;
  export npm_config_runtime=electron; fi
- COMMIT_MESSAGE=$(git show -s --format=%B $TRAVIS_COMMIT | tr -d '\n')
- PUBLISH_BINARY=true
- if [[ $MUSL ]]; then EXTRA_NODE_PRE_GYP_FLAGS="--target_libc=musl"; fi;
- git clone https://github.com/creationix/nvm.git ../.nvm && source ../.nvm/nvm.sh
- nvm install $NODE_NVM_VERSION
- nvm use $NODE_NVM_VERSION
- echo $PUBLISH_BINARY
- node --version
- npm --version
- "$CXX --version"
install:
- if [[ $MUSL ]]; then scripts/alpine-build.sh; else npm install --build-from-source;
  fi
script:
- if [[ $MUSL ]]; then scripts/alpine-test.sh ./node_modules/.bin/node-pre-gyp package
  testpackage $EXTRA_NODE_PRE_GYP_FLAGS; else ./node_modules/.bin/node-pre-gyp package
  testpackage $EXTRA_NODE_PRE_GYP_FLAGS; npm test; fi
- if [[ "${PUBLISH_BINARY}" ]]; then ./node_modules/.bin/node-pre-gyp unpublish publish
  $EXTRA_NODE_PRE_GYP_FLAGS; rm -rf {build,binding}; fi
- if [[ $MUSL ]]; then ./scripts/alpine-test.sh ./node_modules/.bin/node-pre-gyp install
  $EXTRA_NODE_PRE_GYP_FLAGS; else ./node_modules/.bin/node-pre-gyp install $EXTRA_NODE_PRE_GYP_FLAGS;
  npm test; fi
