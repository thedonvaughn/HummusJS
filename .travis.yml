language: cpp
compiler:
- gcc
os:
- linux
- osx
addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    packages:
    - g++-4.8
services:
- docker
env:
  matrix:
  - MUSL=true NODE_NVM_VERSION="9.11.1"
  - MUSL=true NODE_NVM_VERSION="10.8.0"
  - MUSL=true NODE_NVM_VERSION="11.2.0"
  global:
  - secure: SO+WLUcYYn8iC2FyeJ954ZGqqrrc+QTZR21KnP5vo549QX/zjurOWGxwWM77IsILAtE2i3R/PzCbAoLH45LEbnmU2Xvg4YkMStXocwWs6RLYbT7j2A+ubQmXR/mZQRlGG6+JwAnuWIpyoeLrtFPAEo323EwWFwBw49n56MtQQITvVAWo8o0M+Jqbgh7BfmhcpvYkL1sncx5aFHc2ecUopzp/rkvTwNpXf35shqMCqnGLAG7zIQQbV9bWy8LnSnee6xzUCzeoxH5w5jll3a/MaAa25h0h4efl3Ke3MX1IdTRoCJwyJt6xABIh064ri7ORjiK0kNj5s/zBPMMHnPNq0ozTSmjXlHljjBxGasI2xCxNrVtTIa/pOBXWnP/x/1JAikVDQ0YqTLyQrv2GPWHdA2pKjYGnIDOcs1OIaLzxNh3MjTtKMFAnoVpBegRJcRNj/L6F4vj2dtiovbM64EAoh/xniukE2RykwAGw6YMU1avEuwGH6X+VGrcNWp8ASaslJN95v6Fhzm+b7j+iobNs3sWjSIs2oqLGPw13UyG7bONjqkt/i0L/9FaMIkj8vtyz1gF9stXzs1eVOPvmG+JhOKozeVZ1VWLf14qf8mSSiEsjaYSBalwhyjPVP269yau/hfdbfcdoMBQc1+uIE4EkkseY1JduEStL3TlkaSeS73E=
  - secure: E3JV3D+U2+wxt7yuNoMcsEvo5/Ih7jfxyoITr4cCCcqEJqvG6Ic/0ZH3QpQQqxfuzec5AGsWBm4aX97o+Ub+ZgETHI1Wfo1SE8EfY2dxEtzBaGoevtruXTWnE63jbyupKfbrQf627tC3LrZEr94cKBtE2l2s1bdpWVb0uosXbktBTBkazMbwezoudir+hMPE+U+SLk62uyGzUQSxGLIjQzV2S3L+l6vnnqVkdSxSHJNTPSGvFOrBTTtSr2JItprUGZlKL9ZuuZ+gah04Ndq9G3j1dlF7pdMMW9PFLbjhUWFZp+GZ+4E5D8RoSB1kpYpqv2UTVnbt51XH0U5TFGBpuUl383Vxi8GM8F2QB80nDg3x3o98hwE/bPT8gyn6FfMLKEPrWpUH9WaSCXb39ALS71cv3RF/X/Vl6oSbZv3ASyaljnbeJf3jefFj903mSsNJzKf28Nk1rYQm/TtH+jZMMN0T/u10eEoH4MpFselZwgNikM74qA35las5JlUUYy+SEtfBTAo7P7MN1crBqIgMi1rSc8dNKKYwfIi47HVfsKnKiC2d75VBWiznQvYqnZ1jbJCF9+YAS1Cm1sJCmumDbOHzClIZ7WSycP8ReojmF/+0MYjm8YgKpBv0v5oFOR7jNdLL/7wESNECO/xy2Eu4AhEJw61x6lMudVCZTkGL0fk=
matrix:
  allow_failures:
  - env: ELECTRON_VERSION="3.0.10" NODE_NVM_VERSION="10.2.0"
  - os: osx
    env: MUSL=true NODE_NVM_VERSION="9.11.1"
  - os: osx
    env: MUSL=true NODE_NVM_VERSION="10.8.0"
  - os: osx
    env: MUSL=true NODE_NVM_VERSION="11.2.0"
before_install:
- if [[ $TRAVIS_OS_NAME == "linux" ]]; then export CXX=g++-4.8; fi
- if [[ $ELECTRON_VERSION ]]; then export npm_config_target=$ELECTRON_VERSION; export
  npm_config_target_arch=x64; export npm_config_disturl=https://atom.io/download/electron;
  export npm_config_runtime=electron; fi
- COMMIT_MESSAGE=$(git show -s --format=%B $TRAVIS_COMMIT | tr -d '\n')
- PUBLISH_BINARY=true
- if [[ $MUSL ]]; then EXTRA_NODE_PRE_GYP_FLAGS="--target_libc=musl"; fi;
- git clone https://github.com/creationix/nvm.git ../.nvm && source ../.nvm/nvm.sh
- nvm install $NODE_NVM_VERSION
- nvm use $NODE_NVM_VERSION
- echo $PUBLISH_BINARY
- node --version
- npm --version
- "$CXX --version"
install:
- if [[ $MUSL ]]; then scripts/alpine-build.sh; else npm install --build-from-source;
  fi
script:
- if [[ $MUSL ]]; then scripts/alpine-test.sh ./node_modules/.bin/node-pre-gyp package
  testpackage $EXTRA_NODE_PRE_GYP_FLAGS; else ./node_modules/.bin/node-pre-gyp package
  testpackage $EXTRA_NODE_PRE_GYP_FLAGS; npm test; fi
- if [[ "${PUBLISH_BINARY}" ]]; then ./node_modules/.bin/node-pre-gyp unpublish publish
  $EXTRA_NODE_PRE_GYP_FLAGS; rm -rf {build,binding}; fi
- if [[ $MUSL ]]; then ./scripts/alpine-test.sh ./node_modules/.bin/node-pre-gyp install
  $EXTRA_NODE_PRE_GYP_FLAGS; else ./node_modules/.bin/node-pre-gyp install $EXTRA_NODE_PRE_GYP_FLAGS;
  npm test; fi
